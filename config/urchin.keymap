/*
 * Urchin / Ferris-Sweep style keymap — Base / Num / Code / Mac + Settings
 * SPDX-License-Identifier: MIT
 * (adapted for McKay)
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* -------------------
 * Layer indices
 * ------------------- */
#define BASE      0
#define NUM       1
#define CODE      2
#define MAC       3
#define SETTINGS  4

/* -------------------
 * Sticky-keys tuning
 * ------------------- */
&sk {
  // keep sticky mods even if another mod is pressed
  ignore-modifiers;
};

/* -------------------
 * Behaviors & Macros
 * ------------------- */
 /{
  behaviors {
    // Quick-tap = hold-preferred hold-tap with quick-tap timing
    // Use as:  &qt LSHIFT SPACE
    qt: quick_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "QUICK_TAP";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&kp>;
    };
  };

  macros {
    // Clear stuck modifiers: press all mods to reset state
    unstick: unstick {
      label = "ZM_unstick";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
    };

    // Spotlight (Cmd+Space)
    spotlight: spotlight {
      label = "Spotlight";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LG(SPACE)>;
    };

    // "Hyper" one-shot (Cmd+Opt+Ctrl+Shift) for the NEXT key
    hyper_os: hyper_os {
      label = "HyperOS";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&sk LGUI &sk LALT &sk LCTRL &sk LSHIFT>;
    };

    // Terminal staples
    term_tab: term_tab {
      label = "TermTAB";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp TAB>;
    };
    term_slash: term_slash {
      label = "TermSlash";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp SLSH>;
    };
    term_dot: term_dot {
      label = "TermDot";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp DOT>;
    };

    // Quick coding operators
    arrow_func: arrow_func {   // =>
      label = "=>";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EQUAL &kp S(DOT)>;
    };
    eqeq: eqeq {               // ==
      label = "==";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EQUAL &kp EQUAL>;
    };
    eqeqeq: eqeqeq {           // ===
      label = "===";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
    };
    arrow_right: arrow_right { // ->
      label = "->";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp MINUS &kp S(DOT)>;
    };
  };

  /* -------------------
   * Combos (adjust key-positions if your board differs)
   * ------------------- */
  combos {
    compatible = "zmk,combos";

    // both right thumb keys -> MAC layer (power/macros)
    combo_mac {
      timeout-ms = <200>;
      key-positions = <32 33>;
      bindings = <&mo MAC>;
    };

    // inner-left & outer-right thumb keys -> CODE layer
    combo_code {
      timeout-ms = <200>;
      key-positions = <31 33>;
      bindings = <&mo CODE>;
    };

    // both left thumb keys -> SETTINGS layer
    combo_settings {
      timeout-ms = <200>;
      key-positions = <30 31>;
      bindings = <&mo SETTINGS>;
    };

    // ctrl + space chord on Base
    combo_ctrl_space {
      timeout-ms = <200>;
      key-positions = <12 13>;
      bindings = <&kp LC(SPACE)>;
      layers = <BASE>;
    };
  };

  /* -------------------
   * Keymap (Ferris-style: 3 rows × 10 + 5 thumbs)
   * ------------------- */
  keymap {
    compatible = "zmk,keymap";

    // ========= Base =========
    default_layer {
      label = "Base";
      bindings = <
        &kp Q      &kp W      &kp E      &kp R      &kp T           &kp Y      &kp U      &kp I      &kp O      &kp P
        &kp A      &kp S      &kp D      &kp F      &kp G           &kp H      &kp J      &kp K      &kp L      &kp APOSTROPHE
        &kp Z      &kp X      &kp C      &kp V      &kp B           &kp N      &kp M      &kp COMMA  &kp DOT    &kp SLSH
                                     &mo NUM   &qt LSHIFT SPACE     &kp SPACE  &mo CODE   &kp BSPC
      >;
    };

    // ========= Numeric / Symbols =========
    num_layer {
      label = "Num";
      bindings = <
        &kp N1     &kp N2     &kp N3     &kp N4     &kp N5          &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
        &kp EQUAL  &kp S(EQUAL) &kp LPRN &kp RPRN   &kp MINUS       &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC   &kp BSLH
        &kp S(N8)  &kp S(SLSH) &kp S(N5) &kp S(MINUS) &kp GRAVE     &kp COMMA  &kp DOT    &kp S(SEMI)&kp SEMI   &kp GRAVE
                                   &mo MAC     &mo CODE             &trans     &trans     &trans
      >;
    };

    // ========= Coding Semantics =========
    coding_layer {
      label = "Code";
      bindings = <
        &kp GRAVE  &kp S(GRAVE) &kp S(N1) &kp S(N2) &kp S(N3)       &kp S(N4)  &kp S(N5)  &kp S(N6)  &kp S(N7)  &kp S(N8)
        &kp LPRN   &kp RPRN     &kp LBKT  &kp RBKT  &kp LBRC        &kp RBRC   &kp S(N2)  &kp APOSTROPHE &kp S(APOSTROPHE) &kp PIPE
        &kp SLSH   &kp BSLH     &kp S(SEMI) &kp SEMI &kp S(MINUS)   &eqeq      &eqeqeq    &arrow_right &arrow_func &kp EQUAL
                                   &mo NUM    &trans                &trans     &trans     &trans
      >;
    };

    // ========= Macros / Power =========
    macros_layer {
      label = "Mac";
      bindings = <
        &spotlight   &kp LC(T)    &kp LC(R)    &kp LC(W)    &kp LC(Q)    &kp HOME   &kp PG_UP  &kp UP     &kp PG_DN   &kp END
        &hyper_os    &kp LG(LEFT) &kp LG(RIGHT)&kp LC(LEFT) &kp LC(RIGHT)&kp LEFT   &kp DOWN   &kp RIGHT  &kp DELETE  &unstick
        &term_tab    &term_slash  &term_dot    &kp BSPC     &kp LG(BSPC) &kp LC(BSPC) &kp LC(DELETE) &kp LG(D) &kp LG(S) &kp CAPS
                                    &trans      &trans       &trans       &mo CODE    &trans
      >;
    };

    // ========= Settings / BT / Boot =========
    settings_layer {
      label = "Sett.";
      bindings = <
        &bootloader  &trans  &trans  &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 3  &trans  &unstick  &trans  &bootloader
        &trans       &trans  &trans  &trans       &bt BT_SEL 1   &bt BT_SEL 4  &trans  &trans    &trans  &trans
        &trans       &trans  &trans  &trans       &bt BT_SEL 2   &bt BT_SEL 5  &trans  &trans    &trans  &trans
                                   &trans     &trans            &trans        &trans   &trans
      >;
    };
  };
};
